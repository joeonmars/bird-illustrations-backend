{
  "name": "etsy-js-heroku",
  "description": "An asynchronous nodejs wrapper for the etsy v2 api.",
  "version": "0.0.5",
  "main": "./lib/etsyjs",
  "repository": {
    "type": "git",
    "url": "git@github.com:GeorgiCodes/etsy-js.git"
  },
  "scripts": {},
  "dependencies": {
    "coffee-script": "1.7.x",
    "oauth": "0.9.x",
    "prettyjson": "1.0.x",
    "request": "2.34.x"
  },
  "devDependencies": {
    "chai": "1.9.x",
    "cookie-parser": "1.1.x",
    "express": "4.4.x",
    "express-session": "1.3.x",
    "grunt": "0.4.x",
    "grunt-coffeelint": "0.0.x",
    "grunt-contrib-coffee": "0.10.x",
    "grunt-contrib-watch": "0.6.x",
    "grunt-mocha-test": "0.10.x",
    "grunt-release": "0.7.x",
    "nconf": "0.6.x",
    "nock": "0.28.x"
  },
  "engine": "node 0.10.x",
  "bugs": {
    "url": "https://github.com/GeorgiCodes/etsy-js/issues"
  },
  "homepage": "https://github.com/GeorgiCodes/etsy-js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "author": {
    "name": "joeonmars",
    "email": "joeonmars@gmail.com",
    "url": "https://www.npmjs.com/package/etsy-js"
  },
  "license": "ISC",
  "readme": "etsy-js\n=======\n\netsy-js is an asynchronous nodeJS wrapper for the etsy v2 api.\n\n# Installation\nInstall the latest stable version\n```\n$ npm install etsy-js\n```\n\nBleeding edge version\n```\n$ git clone https://github.com/GeorgiCodes/etsy-js.git\n$ cd etsy-js\n$ npm install\n```\n\n# Usage\n\n## Public Mode\nThe Etsy API has two modes: public, and authenticated. Public mode only requires an API key (available from http://developer.etsy.com ).\n\n```js\nvar etsyjs = require('etsy-js');\nvar client = etsyjs.client('your_api_key');\n\n// direct API calls (GET / PUT / POST / DELETE)\nclient.get('/users/sparkleprincess', {}, function (err, status, body, headers) {\n  console.log(body); //json object\n});\n\n// or you can use some convenience methods\nvar etsyUser = client.user('sparkleprincess');\nvar etsySearch = client.search();\nvar etsyShop = client.shop('shopALot');\n\netsyUser.find(function(err, body, headers) {\n  console.log(body); //json object\n});\n```\nYou can make any non-authenticated calls to the API that you need.\n\n## Authenticated Mode\nThe Etsy API has support for both retrieval of extended information and write support for authenticated users. Authentication can be performed from within a web application.\n\nIn authenticated mode, you need to set a client, secret and callbackURL.\n```js\nvar etsyjs = require('etsy-js');\n\nvar client = etsyjs.client({\n  key: 'key',\n  secret: 'secret',\n  callbackURL: 'http://localhost:3000/authorise'\n});\n```\n\nIn this mode, you'll need to store the request token and secret before redirecting to the verification URL.\nA simple example in coffeescript using Express and Express Sessions:\n```js\nexpress = require('express')\nsession = require('express-session')\ncookieParser = require('cookie-parser')\nurl = require('url')\netsyjs = require('etsy-js')\n\n# instantiate client with key and secret and set callback url\nclient = etsyjs.client\n  key: nconf.get('key')\n  secret: nconf.get('secret')\n  callbackURL: 'http://localhost:3000/authorise'\n\napp = express()\napp.use(cookieParser('secEtsy'))\napp.use(session())\n\napp.get '/', (req, res) ->\n  client.requestToken (err, response) ->\n    return console.log err if err\n    req.session.token = response.token\n    req.session.sec = response.tokenSecret\n    res.redirect response.loginUrl\n\napp.get '/authorise', (req, res) ->\n  # parse the query string for OAuth verifier\n  query = url.parse(req.url, true).query;\n  verifier = query.oauth_verifier\n\n  # final part of OAuth dance, request access token and secret with given verifier\n  client.accessToken req.session.token, req.session.sec, verifier, (err, response) ->\n    # update our session with OAuth token and secret\n    req.session.token = response.token\n    req.session.sec = response.tokenSecret\n    res.redirect '/find'\n\napp.get '/find', (req, res) ->\n  # we now have OAuth credentials for this session and can perform authenticated requests\n  client.auth(req.session.token, req.session.sec).user(\"etsyjs\").find (err, body, headers) ->\n    console.log err if err\n    console.dir(body) if body\n    res.send body.results[0] if body\n\nserver = app.listen 3000, ->\n  console.log 'Listening on port %d', server.address().port\n```\n## API Callback Strucutre\n\nAll the callbacks fwill take first an error argument, then a data argument, like this:\n```js\netsyUser.find(function(err, body, headers) {\n  console.log(\"error: \" + err);\n  console.log(\"data: \" + body);\n  console.log(\"headers:\" + headers);\n});\n```\n\n## Pagination\nPagination is supported, simply pass through params as follows:\n\n```js\nvar params = {\n  keywords: \"rainbow\"\n  offset: 1,\n  limit: 25\n};\n\nclient.search().findAllUsers(params, function(err, body, headers) {\n  console.log(\"data: \" + body);\n});\n```\n\n## Etsy authenticated user api\n\nMore examples to come...\n\n##### Get information about the user (GET /user)\n```js\netsyUser.find(callback); //json\n```\n\n# Development\n\n## Running the tests\n```js\n$ grunt test\n```\n# Contributions & Bugs\nPlease submit and bugs to this project and I will fix them. Pull requests also welcome.\n\n# Acknowledgements\n\nThanks to the ruby etsy api wrapper as I used their fixture tests data for the etsy-js tests and README outline.\nThanks to octonode for the inspiration to make this API in coffeescript.\n\n# Next Steps\n* integrate with travis properly\n* pass in scope?\n* Rate limiting helper method\n* More helper methods!!\n* Flesh out me.coffee (should just call user with __SELF__) with tests\n* use logging not console\n",
  "readmeFilename": "README.md",
  "_id": "etsy-js-heroku@0.0.5",
  "_shasum": "a6ddfca6cefad67bd24e5953df391c5617561d37",
  "_from": "etsy-js-heroku@latest"
}
